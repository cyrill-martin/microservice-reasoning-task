#line 2 "src/TurtleLexer.cc"

#include "Token.hh"

#line 6 "src/TurtleLexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 23
#define YY_END_OF_BUFFER 24
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[402] =
    {   0,
        0,    0,   24,   22,   15,   15,   22,   16,   22,   22,
       22,    8,    4,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   15,    0,   11,    0,   16,
        0,   12,    0,    0,    8,    9,    0,    0,    0,    5,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    3,    0,    7,    7,    7,
        0,    0,    4,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       21,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   11,    0,    0,    0,   12,    0,    0,    0,    0,
        9,    0,    0,   10,    0,    0,    5,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    5,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    7,    7,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    6,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   10,    0,   10,
        0,    5,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    5,
        5,    0,    0,    0,    0,    0,    7,    7,    7,    0,
        0,    0,    0,    0,    0,   20,    0,    6,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   18,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    5,    5,    5,    0,    0,    0,    5,
        0,    0,    2,    7,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    6,    6,    0,    0,    0,   17,   14,
        0,    0,    0,    0,   13,    0,    0,    0,    0,    5,
        0,    0,    7,   19,    6,    6,    6,    0,    0,    0,
        6,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        1,    6,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    6,    9,    6,   10,    6,
        6,    6,   11,    6,   12,   13,    6,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   15,    6,   16,
        6,   17,    6,   18,   19,   20,   21,   21,   22,   23,
       24,   24,   25,   24,   24,   24,   24,   24,   24,   26,
       24,   27,   28,   24,   29,   24,   24,   30,   24,   24,
       31,   32,   31,   33,   34,    1,   35,   36,   21,   21,

       37,   38,   24,   24,   39,   24,   24,   40,   24,   41,
       24,   42,   24,   43,   44,   45,   46,   24,   24,   47,
       24,   24,    1,    1,    1,    6,   31,   48,   49,   50,
       50,   50,   50,   51,   52,   52,   52,   52,   52,   53,
       53,   52,   52,   54,   54,   54,   54,   54,   54,   54,
       55,   54,   54,   54,   54,   54,   54,   54,   54,   56,
       56,   56,   56,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   58,   58,   58,   58,   58,
       58,   58,   59,   60,   60,   60,   60,   60,   60,   61,
       62,   31,   31,   63,   64,   65,   65,   65,   65,   65,

       65,   65,   65,   66,   67,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   69,   70,   71,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   73,   31,   74,   75,
       76,   76,   77,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31
    } ;

static const YY_CHAR yy_meta[78] =
    {   0,
        1,    1,    2,    3,    1,    4,    1,    4,    4,    4,
        4,    5,    4,    6,    4,    1,    4,    4,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        4,    4,    1,    8,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    9,    9,    9,
        9,    9,    9,    9,   10,    9,    9,    9,   10,    9,
        9,    9,    4,    8,    8,    4,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8
    } ;

static const flex_int16_t yy_base[471] =
    {   0,
        0,    0, 1101, 1944,   76,   80,   79,    0,   77,   75,
     1086,   77,  106,   75,   58,  172,   77,   70, 1066, 1078,
     1057, 1047,    0,   43,   46,   63,   98,    0,  172,    0,
      113,  167,  196,    0,  211,  267,  266, 1028,  267,    0,
       85, 1018,  282, 1012,  265,   79,  269,  270,  310,  340,
      384,    0,   64,  235,  221,  278,    0,  371,    0,  386,
      366,  388,    0,  403,  107, 1944,  143, 1009,  274,  273,
        0,  985,    0,  925,    0,  245,  260,  406,  905,  412,
        0,  427,    0,  442,  422,  444,    0,  459,  160,  168,
     1944,  453,  918,  903,    0,    0,    0,  895,    0,  483,

        0,  489,    0,    0,    0,  499,    0,  260,    0,    0,
        0, 1944,  294,  539,  549, 1944,  341,  559,  569,  330,
      579,  377,  847,  831,  589,  599,    0,    0,  632,  767,
        0,  407,  543,  592,  764,  598,    0,  613,    0,  628,
      571,  630,    0,  645,    0,    0,    0,  762,    0,  655,
        0,  661,    0,    0,    0,  671,    0,  295,    0,    0,
        0,  711,  721,    0,  125,  602,    0,    0,  502,  697,
        0,  702,    0,  712,    0,    0,    0,  722,    0,  337,
        0,    0,    0,  764,  758,  830,    0,  593,  754,  610,
      761,    0,  830,    0,  860,  825,  862,    0,  877,  913,

      253,  321,  578,    0,    0,    0,  929,  930,  931,  959,
      969,  636,  814,  991, 1019, 1029,  725,  724,  723,  722,
     1039,    0,    0,    0,  503,  681,    0,  894,    0,  960,
        0,    0,    0,  903,    0,  339,    0,    0,    0,    0,
        0,    0,    0,    0, 1049, 1059,  716,  927,  611,  760,
      825,  826,    0,    0,    0,  948, 1066,    0,    0,  611,
        0,  916,  944,  963,  606, 1050,    0, 1065,    0, 1080,
     1060, 1082,    0, 1097,    0,    0,  564,    0, 1107,    0,
     1113,    0,    0,    0, 1123,    0,  402,    0,    0,    0,
      965, 1008, 1009,  933, 1163, 1173, 1183, 1193, 1015, 1203,

     1213, 1223, 1233,    0,    0,    0,    0,    0,    0,    0,
     1243, 1253,  587,  947, 1061, 1255,    0,    0,  504,  519,
        0, 1245,    0, 1255,    0,    0,    0, 1265,    0,  665,
        0,    0,    0,    0,    0,    0,    0,    0, 1067, 1944,
     1305, 1315, 1325, 1335, 1944, 1345, 1355, 1365, 1375,    0,
     1385, 1395,  507, 1262,    0,    0,    0,    0,    0,    0,
        0, 1405, 1415, 1425,  961, 1435, 1445, 1455, 1290, 1465,
      359,    0, 1475, 1485, 1495, 1505, 1515, 1525, 1535, 1545,
     1012, 1555, 1565, 1291, 1575, 1585, 1595, 1605, 1615, 1625,
     1635, 1645, 1662, 1665, 1664, 1658, 1685, 1695, 1703, 1666,

     1944, 1735, 1745, 1755, 1762,  343,  308, 1764, 1766, 1768,
      298, 1770, 1772, 1774,  279, 1776, 1778, 1780, 1785, 1785,
     1787, 1789, 1791, 1801, 1811,  194, 1813, 1815, 1817, 1819,
     1821, 1823, 1825, 1830, 1833, 1832, 1834, 1836, 1838,  101,
     1840, 1842, 1844, 1846, 1856, 1866, 1868, 1870, 1872, 1874,
     1876, 1878,   94, 1880, 1882, 1884, 1886, 1888, 1890, 1892,
     1894, 1896, 1898, 1900, 1902, 1904, 1906, 1916, 1926, 1933
    } ;

static const flex_int16_t yy_def[471] =
    {   0,
      401,    1,  401,  401,  401,  401,  402,  403,  404,  401,
      401,  401,  401,  405,  406,  401,   16,   16,  401,  401,
       16,   16,  407,  407,  401,  407,  401,  408,  401,  409,
      401,  401,  401,  410,  401,  401,  402,  401,  401,  403,
      404,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  411,  411,  401,  411,  401,  412,  401,  413,  401,
      401,  401,  414,  401,  405,  401,  401,  406,  406,  406,
       16,   16,   13,  401,  415,  415,  415,  415,   78,  401,
      416,  401,  417,  401,  401,  401,  418,  401,   16,   16,
      401,  419,   16,   16,   16,  420,  420,  401,  420,  401,

      420,  401,  420,  420,  420,  420,  420,  420,  421,  422,
      423,  401,  424,  401,  401,  401,  425,  401,  401,  401,
      401,  401,  401,  401,  401,  401,   50,   50,  401,  401,
      426,  426,  426,  426,  134,  401,  427,  401,  428,  401,
      401,  401,  429,  401,   50,  430,  430,  401,  430,  401,
      430,  401,  430,  430,  430,  430,  430,  430,  431,  432,
      433,  401,  401,  434,  435,  435,  436,  436,  401,  436,
      436,  401,  436,  401,  436,  436,  436,  436,  436,  436,
      437,  438,  439,  401,  184,  401,  440,  440,  401,  440,
      401,  441,  401,  442,  401,  401,  401,  443,  401,  184,

      184,  184,  184,  444,  444,  444,  445,  445,  401,  401,
      401,  446,  446,  401,  401,  401,  401,  401,  401,  401,
      401,   50,  447,  447,  401,  447,  447,  401,  447,  401,
      447,  447,  447,  447,  447,  447,  448,  449,  450,   50,
       50,  451,  451,  451,  401,  401,  434,  435,  435,  184,
      184,  184,  452,  452,  452,  184,  184,  186,  186,  401,
      453,  453,  453,  453,  264,  401,  454,  401,  455,  401,
      401,  401,  456,  401,  457,  457,  401,  457,  401,  457,
      401,  457,  457,  457,  457,  457,  457,  458,  459,  460,
      184,  184,  184,  445,  401,  401,  401,  401,  446,  401,

      401,  401,  401,   50,   50,   50,  461,  461,  461,   50,
      401,  401,  435,  435,  184,  184,  462,  462,  401,  462,
      462,  401,  462,  401,  462,  462,  462,  462,  462,  462,
      463,  464,  465,  186,  186,  466,  466,  466,  184,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,   50,
      401,  401,  435,  184,  186,  186,  186,  467,  467,  467,
      186,  401,  401,  401,  468,  401,  401,  401,  469,  401,
      435,  186,  401,  401,  401,  401,  401,  401,  401,  401,
      445,  401,  401,  446,  401,  401,  401,  401,  401,  401,
      401,  401,  468,  401,  469,  470,  401,  401,  445,  446,

        0,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401
    } ;

static const flex_int16_t yy_nxt[2022] =
    {   0,
        4,    5,    6,    5,    5,    4,    7,    8,    4,    9,
       10,   10,   11,   12,   13,   14,    4,   15,   16,   17,
       16,   16,   16,   16,   16,   18,   16,   16,   16,   16,
        4,    4,   19,   20,   16,   17,   16,   21,   16,   16,
       16,   18,   16,   16,   22,   16,   16,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,   23,   24,    4,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   36,   36,
       36,   36,   36,   36,   36,   38,   42,   44,   45,   47,
       45,   66,   46,   69,  116,   89,   90,   95,   48,   70,

      120,   95,  258,   95,   95,   95,   67,   95,   43,  186,
       39,   89,   90,   48,   49,  120,   43,   95,   50,   50,
       50,   95,   50,   66,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,  164,   51,   67,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   96,   96,   96,   96,   96,   96,   96,
      104,  104,  104,  104,  104,  104,  104,  104,  248,   52,
       53,  162,   54,   55,   56,   57,   58,   59,   60,   61,
       62,   63,   64,   71,   72,   71,   73,  184,  163,  185,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,

       71,   71,  127,  184,  185,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   98,
       99,   99,  100,  105,  105,  106,  107,  107,  108,  101,
      101,  101,  101,  102,   74,   75,   76,   77,   78,   79,
       80,   81,   82,   83,   84,   85,   86,   87,   88,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,   36,   36,
       36,   36,  112,   37,   71,   50,   37,   47,   45,   50,
      123,  123,  121,  124,  164,  164,   48,   71,   41,  292,
      122,   41,   50,   50,   50,  114,   50,   39,   37,   71,

      208,   48,   37,   71,   37,  122,   50,   37,  165,   37,
      118,   37,  115,   41,   71,  166,   95,   41,   71,   41,
      401,  401,   41,  125,   41,  209,   41,  119,  125,  125,
      125,  125,  125,  146,  146,  146,  146,  146,  146,  146,
      217,  217,   71,  218,  125,  125,  125,  125,  126,   68,
      213,  127,  128,  127,  127,  401,  401,   71,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      164,  129,  214,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  219,  219,  145,
      220,  145,  145,  145,  145,  145,  145,  401,  401,  401,

      401,  145,  130,  131,  132,  133,  134,  135,  136,  137,
      138,  139,  140,  141,  142,  143,  144,  145,  148,  149,
      149,  150,  155,  155,  156,  157,  157,  158,  151,  151,
      151,  151,  152,  154,  154,  154,  154,  154,  154,  154,
      154,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
       71,  127,  401,  401,   71,  127,  401,  167,  167,  167,
      167,  167,  167,  167,  169,  170,  171,  172,  177,  177,
      178,  179,  179,  180,  173,  173,  173,  173,  174,  176,
      176,  176,  176,  176,  176,  176,  176,  181,  181,  181,

      181,  181,  181,  181,  181,  181,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  187,  188,  164,  189,
      190,  191,  192,  193,  194,  195,  196,  197,  198,  199,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  203,  203,  203,  203,
      203,  203,  210,  371,  250,  304,  355,  210,  210,  210,
      210,  210,  211,   71,  127,  258,  356,  211,  211,  211,
      211,  211,  215,  210,  210,  210,  210,  215,  215,  215,
      215,  215,  216,  211,  211,  211,  211,  216,  216,  216,
      216,  216,  121,  215,  215,  215,  215,  127,  164,   71,

      122,  127,  145,  216,  216,  216,  216,  145,  145,  145,
      145,  145,  221,  164,   71,  122,  334,  221,  221,  221,
      221,  221,  164,  145,  145,  145,  145,  233,  233,  234,
      235,  235,  236,  221,  221,  221,  221,  222,  249,  222,
      222,  222,  222,  222,  222,  213,  127,  186,  314,  222,
      127,  186,  401,  223,  223,  223,  223,  223,  223,  223,
      225,  226,  227,  228,  186,  222,  258,  214,  186,  258,
      229,  229,  229,  229,  230,  232,  232,  232,  232,  232,
      232,  232,  232,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  239,  239,  239,  239,  239,  239,  239,  239,

      239,  239,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  241,  241,
      241,  241,  241,  241,  245,  401,  401,  164,  305,  245,
      245,  245,  245,  245,  246,  220,  220,  218,  218,  246,
      246,  246,  246,  246,  251,  245,  245,  245,  245,  250,
      250,  250,  250,  250,  250,  246,  246,  246,  246,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  252,
      252,  252,  252,  252,  252,   71,   72,   71,   73,   71,
      257,   71,   71,   71,   71,  256,   71,   71,   71,   71,
       71,   71,   71,   71,   71,  257,   71,   71,   71,   71,

      256,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,  186,  186,  186,  240,  186,  275,  275,  275,  275,
      275,  275,  275,  299,  127,  127,   74,   75,   76,   77,
       78,   79,   80,   81,   82,   83,   84,   85,   86,   87,
       88,  258,  259,  258,  124,  214,   71,   71,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      124,   71,   71,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  277,  278,  278,
      279,  284,  284,  285,  286,  286,  287,  280,  280,  280,
      280,  281,  260,  261,  262,  263,  264,  265,  266,  267,

      268,  269,  270,  271,  272,  273,  274,  283,  283,  283,
      283,  283,  283,  283,  283,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,   71,  208,  294,  207,  164,  340,
      207,  304,  304,  304,  304,  304,  304,  202,  201,   71,
      306,  306,  306,  306,  306,  306,  291,  200,  164,  295,
      209,  209,  207,  313,  209,   71,  207,  112,  207,   71,
      258,  207,  297,  207,  258,  207,  296,  297,  297,  297,
      297,  297,  298,   71,   71,  353,   71,  298,  298,  298,
      298,  298,   39,  297,  297,  297,  297,  212,  258,  401,

      212,  339,  258,  298,  298,  298,  298,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  258,  208,  300,
      164,  258,  212,  401,  345,   46,  212,  117,  212,   71,
       71,  212,  302,  212,  113,  212,  301,  302,  302,  302,
      302,  302,  303,  209,   71,   71,  214,  303,  303,  303,
      303,  303,  222,  302,  302,  302,  302,  222,  222,  222,
      222,  222,  311,  303,  303,  303,  303,  311,  311,  311,
      311,  311,  312,  222,  222,  222,  222,  312,  312,  312,
      312,  312,   71,  311,  311,  311,  311,   71,   71,   94,
      316,   93,   92,  312,  312,  312,  312,   71,   91,   46,

      401,  401,   71,   71,  316,  317,  317,  317,  317,  317,
      317,  317,  319,  320,  321,  322,  327,  327,  328,  329,
      329,  330,  323,  323,  323,  323,  324,  326,  326,  326,
      326,  326,  326,  326,  326,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  334,  334,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      335,  335,  335,  335,  335,  335,  341,  401,  401,  401,
      401,  341,  341,  341,  341,  341,  342,  401,  401,  401,
      401,  342,  342,  342,  342,  342,  343,  341,  341,  341,

      341,  343,  343,  343,  343,  343,  344,  342,  342,  342,
      342,  344,  344,  344,  344,  344,  346,  343,  343,  343,
      343,  346,  346,  346,  346,  346,  347,  344,  344,  344,
      344,  347,  347,  347,  347,  347,  348,  346,  346,  346,
      346,  348,  348,  348,  348,  348,  349,  347,  347,  347,
      347,  349,  349,  349,  349,  349,  351,  348,  348,  348,
      348,  351,  351,  351,  351,  351,  352,  349,  349,  349,
      349,  352,  352,  352,  352,  352,   71,  351,  351,  351,
      351,  401,  401,   71,  354,  401,  401,  352,  352,  352,
      352,   71,  355,  355,  355,  355,  355,  355,   71,  116,

      213,  354,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  357,  357,  357,  357,  357,  357,  362,  401,
      401,   43,  214,  362,  362,  362,  362,  362,  363,  401,
      401,  401,  401,  363,  363,  363,  363,  363,  364,  362,
      362,  362,  362,  364,  364,  364,  364,  364,  365,  363,
      363,  363,  363,  365,  365,  365,  365,  365,  366,  364,
      364,  364,  364,  366,  366,  366,  366,  366,  367,  365,
      365,  365,  365,  367,  367,  367,  367,  367,  368,  366,
      366,  366,  366,  368,  368,  368,  368,  368,  369,  367,
      367,  367,  367,  369,  369,  369,  369,  369,  370,  368,

      368,  368,  368,  370,  370,  370,  370,  370,   65,  369,
      369,  369,  369,   65,   65,   65,   65,   65,  373,  370,
      370,  370,  370,  373,  373,  373,  373,  373,  374,   65,
       65,   65,   65,  374,  374,  374,  374,  374,  375,  373,
      373,  373,  373,  375,  375,  375,  375,  375,  376,  374,
      374,  374,  374,  376,  376,  376,  376,  376,  377,  375,
      375,  375,  375,  377,  377,  377,  377,  377,  378,  376,
      376,  376,  376,  378,  378,  378,  378,  378,  379,  377,
      377,  377,  377,  379,  379,  379,  379,  379,  380,  378,
      378,  378,  378,  380,  380,  380,  380,  380,  381,  379,

      379,  379,  379,  381,  381,  381,  381,  381,  382,  380,
      380,  380,  380,  382,  382,  382,  382,  382,  383,  381,
      381,  381,  381,  383,  383,  383,  383,  383,  384,  382,
      382,  382,  382,  384,  384,  384,  384,  384,  385,  383,
      383,  383,  383,  385,  385,  385,  385,  385,  386,  384,
      384,  384,  384,  386,  386,  386,  386,  386,  387,  385,
      385,  385,  385,  387,  387,  387,  387,  387,  388,  386,
      386,  386,  386,  388,  388,  388,  388,  388,  389,  387,
      387,  387,  387,  389,  389,  389,  389,  389,  390,  388,
      388,  388,  388,  390,  390,  390,  390,  390,  391,  389,

      389,  389,  389,  391,  391,  391,  391,  391,  392,  390,
      390,  390,  390,  392,  392,  392,  392,  392,  393,  391,
      391,  391,  391,  393,  393,  393,  393,  393,  394,  392,
      392,  392,  392,  394,  394,  394,  394,  394,  395,  393,
      393,  393,  393,  395,  395,  395,  395,  395,  396,  394,
      394,  394,  394,  396,  396,  396,  396,  396,  397,  395,
      395,  395,  395,  397,  397,  397,  397,  397,  112,  396,
      396,  396,  396,  116,   66,  213,  401,  401,  398,  397,
      397,  397,  397,  398,  398,  398,  398,  398,  401,   67,
      401,  401,  401,   39,  401,   43,  401,  214,  399,  398,

      398,  398,  398,  399,  399,  399,  399,  399,  400,  208,
      401,  401,  401,  400,  400,  400,  400,  400,  401,  399,
      399,  399,  399,  401,  401,  401,  401,  401,  401,  400,
      400,  400,  400,  401,  209,   37,  401,  401,   37,   37,
       37,   37,   37,   37,   37,   40,  401,   40,   40,   40,
       40,   40,   40,   40,   40,   41,  401,  401,   41,   41,
       41,   41,   41,   41,   41,   65,   65,   65,   65,   65,
       65,   65,   97,   97,  103,  103,  110,  110,  147,  147,
      153,  153,  160,  160,  168,  168,  175,  175,  182,  182,
      186,  186,  186,  202,  202,  204,  204,  205,  205,  206,

      206,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  224,  224,  231,  231,  238,  238,  240,  240,  242,
      242,  243,  243,  244,  244,  247,  247,   68,  401,   68,
      250,  250,  253,  253,  254,  254,  255,  255,  276,  276,
      282,  282,  289,  289,  293,  293,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  304,  304,  307,  307,
      308,  308,  309,  309,  310,  310,  315,  315,  318,  318,
      325,  325,  332,  332,  334,  334,  336,  336,  337,  337,

      338,  338,  350,  350,  355,  355,  358,  358,  359,  359,
      360,  360,  361,  361,  372,  372,   37,  401,  401,   37,
       37,   37,   37,   37,   37,   37,   41,  401,  401,   41,
       41,   41,   41,   41,   41,   41,   65,   65,   65,   65,
       65,   65,   65,    3,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,

      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401
    } ;

static const flex_int16_t yy_chk[2022] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    5,    5,    5,
        5,    6,    6,    6,    6,    7,    9,   10,   10,   12,
       12,   14,   46,   15,   41,   17,   18,   24,   12,   15,

       46,   24,  453,   25,   25,   25,   14,   25,    9,  440,
        7,   17,   18,   12,   13,   46,   41,   26,   53,   13,
       13,   26,   53,   65,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,  165,   13,   65,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   27,   27,   27,   27,   27,   27,   27,
       31,   31,   31,   31,   31,   31,   31,   31,  165,   13,
       13,   67,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   16,   16,   16,   16,   89,   67,   90,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,

       16,   16,  426,   89,   90,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   29,
       29,   29,   29,   32,   32,   32,   32,   32,   32,   29,
       29,   29,   29,   29,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   36,   36,
       36,   36,   37,   39,  201,   55,   39,   45,   45,   55,
       48,   48,   47,   48,   70,   69,   45,  415,   43,  201,
       47,   43,   54,   54,   54,   39,   54,   37,   39,   76,

      113,   45,   39,   76,   39,   47,  411,   39,   69,   39,
       43,   39,   39,   43,   77,   70,  407,   43,   77,   43,
      108,  108,   43,   49,   43,  113,   43,   43,   49,   49,
       49,   49,   49,   56,   56,   56,   56,   56,   56,   56,
      120,  120,  202,  120,   49,   49,   49,   49,   50,  406,
      117,   50,   50,   50,   50,  158,  158,  202,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
      371,   50,  117,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,  122,  122,   51,
      122,   51,   51,   51,   51,   51,   51,  180,  180,  236,

      236,   51,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   51,   58,   58,
       58,   58,   61,   61,   61,   61,   61,   61,   58,   58,
       58,   58,   58,   60,   60,   60,   60,   60,   60,   60,
       60,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       78,  132,  287,  287,   78,  132,   78,   80,   80,   80,
       80,   80,   80,   80,   82,   82,   82,   82,   85,   85,
       85,   85,   85,   85,   82,   82,   82,   82,   82,   84,
       84,   84,   84,   84,   84,   84,   84,   86,   86,   86,

       86,   86,   86,   86,   86,   86,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   92,   92,  353,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
      100,  100,  100,  100,  100,  100,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  106,  106,  106,  106,
      106,  106,  114,  353,  169,  225,  319,  114,  114,  114,
      114,  114,  115,  169,  225,  319,  320,  115,  115,  115,
      115,  115,  118,  114,  114,  114,  114,  118,  118,  118,
      118,  118,  119,  115,  115,  115,  115,  119,  119,  119,
      119,  119,  121,  118,  118,  118,  118,  133,  313,  203,

      121,  133,  125,  119,  119,  119,  119,  125,  125,  125,
      125,  125,  126,  166,  203,  121,  277,  126,  126,  126,
      126,  126,  249,  125,  125,  125,  125,  141,  141,  141,
      141,  141,  141,  126,  126,  126,  126,  129,  166,  129,
      129,  129,  129,  129,  129,  212,  134,  188,  249,  129,
      134,  188,  134,  136,  136,  136,  136,  136,  136,  136,
      138,  138,  138,  138,  190,  129,  265,  212,  190,  260,
      138,  138,  138,  138,  138,  140,  140,  140,  140,  140,
      140,  140,  140,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  144,  144,  144,  144,  144,  144,  144,  144,

      144,  144,  150,  150,  150,  150,  150,  150,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  156,  156,
      156,  156,  156,  156,  162,  330,  330,  247,  226,  162,
      162,  162,  162,  162,  163,  220,  219,  218,  217,  163,
      163,  163,  163,  163,  170,  162,  162,  162,  162,  172,
      172,  172,  172,  172,  172,  163,  163,  163,  163,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  178,
      178,  178,  178,  178,  178,  184,  184,  184,  184,  185,
      185,  250,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  185,  185,  250,  184,  184,  184,

      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  189,  189,  189,  148,  189,  191,  191,  191,  191,
      191,  191,  191,  213,  135,  130,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  186,  186,  186,  124,  213,  251,  252,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      123,  251,  252,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  193,  193,  193,
      193,  196,  196,  196,  196,  196,  196,  193,  193,  193,
      193,  193,  186,  186,  186,  186,  186,  186,  186,  186,

      186,  186,  186,  186,  186,  186,  186,  195,  195,  195,
      195,  195,  195,  195,  195,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  200,  207,  208,  209,  248,  294,
      209,  228,  228,  228,  228,  228,  228,   98,   94,  200,
      234,  234,  234,  234,  234,  234,  200,   93,  314,  209,
      207,  208,  209,  248,  294,   79,  209,  365,  209,  256,
      262,  209,  210,  209,  262,  209,  209,  210,  210,  210,
      210,  210,  211,   74,  256,  314,  291,  211,  211,  211,
      211,  211,  365,  210,  210,  210,  210,  214,  263,   72,

      214,  291,  263,  211,  211,  211,  211,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  264,  381,  214,
       68,  264,  214,  264,  299,   44,  214,   42,  214,  292,
      293,  214,  215,  214,   38,  214,  214,  215,  215,  215,
      215,  215,  216,  381,  292,  293,  299,  216,  216,  216,
      216,  216,  221,  215,  215,  215,  215,  221,  221,  221,
      221,  221,  245,  216,  216,  216,  216,  245,  245,  245,
      245,  245,  246,  221,  221,  221,  221,  246,  246,  246,
      246,  246,  315,  245,  245,  245,  245,  257,  339,   22,
      257,   21,   20,  246,  246,  246,  246,  315,   19,   11,

        3,    0,  257,  339,  257,  266,  266,  266,  266,  266,
      266,  266,  268,  268,  268,  268,  271,  271,  271,  271,
      271,  271,  268,  268,  268,  268,  268,  270,  270,  270,
      270,  270,  270,  270,  270,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  279,  279,  279,  279,  279,  279,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      285,  285,  285,  285,  285,  285,  295,    0,    0,    0,
        0,  295,  295,  295,  295,  295,  296,    0,    0,    0,
        0,  296,  296,  296,  296,  296,  297,  295,  295,  295,

      295,  297,  297,  297,  297,  297,  298,  296,  296,  296,
      296,  298,  298,  298,  298,  298,  300,  297,  297,  297,
      297,  300,  300,  300,  300,  300,  301,  298,  298,  298,
      298,  301,  301,  301,  301,  301,  302,  300,  300,  300,
      300,  302,  302,  302,  302,  302,  303,  301,  301,  301,
      301,  303,  303,  303,  303,  303,  311,  302,  302,  302,
      302,  311,  311,  311,  311,  311,  312,  303,  303,  303,
      303,  312,  312,  312,  312,  312,  316,  311,  311,  311,
      311,    0,    0,  354,  316,    0,    0,  312,  312,  312,
      312,  316,  322,  322,  322,  322,  322,  322,  354,  369,

      384,  316,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  328,  328,  328,  328,  328,  328,  341,    0,
        0,  369,  384,  341,  341,  341,  341,  341,  342,    0,
        0,    0,    0,  342,  342,  342,  342,  342,  343,  341,
      341,  341,  341,  343,  343,  343,  343,  343,  344,  342,
      342,  342,  342,  344,  344,  344,  344,  344,  346,  343,
      343,  343,  343,  346,  346,  346,  346,  346,  347,  344,
      344,  344,  344,  347,  347,  347,  347,  347,  348,  346,
      346,  346,  346,  348,  348,  348,  348,  348,  349,  347,
      347,  347,  347,  349,  349,  349,  349,  349,  351,  348,

      348,  348,  348,  351,  351,  351,  351,  351,  352,  349,
      349,  349,  349,  352,  352,  352,  352,  352,  362,  351,
      351,  351,  351,  362,  362,  362,  362,  362,  363,  352,
      352,  352,  352,  363,  363,  363,  363,  363,  364,  362,
      362,  362,  362,  364,  364,  364,  364,  364,  366,  363,
      363,  363,  363,  366,  366,  366,  366,  366,  367,  364,
      364,  364,  364,  367,  367,  367,  367,  367,  368,  366,
      366,  366,  366,  368,  368,  368,  368,  368,  370,  367,
      367,  367,  367,  370,  370,  370,  370,  370,  373,  368,
      368,  368,  368,  373,  373,  373,  373,  373,  374,  370,

      370,  370,  370,  374,  374,  374,  374,  374,  375,  373,
      373,  373,  373,  375,  375,  375,  375,  375,  376,  374,
      374,  374,  374,  376,  376,  376,  376,  376,  377,  375,
      375,  375,  375,  377,  377,  377,  377,  377,  378,  376,
      376,  376,  376,  378,  378,  378,  378,  378,  379,  377,
      377,  377,  377,  379,  379,  379,  379,  379,  380,  378,
      378,  378,  378,  380,  380,  380,  380,  380,  382,  379,
      379,  379,  379,  382,  382,  382,  382,  382,  383,  380,
      380,  380,  380,  383,  383,  383,  383,  383,  385,  382,
      382,  382,  382,  385,  385,  385,  385,  385,  386,  383,

      383,  383,  383,  386,  386,  386,  386,  386,  387,  385,
      385,  385,  385,  387,  387,  387,  387,  387,  388,  386,
      386,  386,  386,  388,  388,  388,  388,  388,  389,  387,
      387,  387,  387,  389,  389,  389,  389,  389,  390,  388,
      388,  388,  388,  390,  390,  390,  390,  390,  391,  389,
      389,  389,  389,  391,  391,  391,  391,  391,  392,  390,
      390,  390,  390,  392,  392,  392,  392,  392,  393,  391,
      391,  391,  391,  395,  396,  400,    0,    0,  394,  392,
      392,  392,  392,  394,  394,  394,  394,  394,    0,  396,
        0,    0,    0,  393,    0,  395,    0,  400,  397,  394,

      394,  394,  394,  397,  397,  397,  397,  397,  398,  399,
        0,    0,    0,  398,  398,  398,  398,  398,    0,  397,
      397,  397,  397,    0,    0,    0,    0,    0,    0,  398,
      398,  398,  398,    0,  399,  402,    0,    0,  402,  402,
      402,  402,  402,  402,  402,  403,    0,  403,  403,  403,
      403,  403,  403,  403,  403,  404,    0,    0,  404,  404,
      404,  404,  404,  404,  404,  405,  405,  405,  405,  405,
      405,  405,  408,  408,  409,  409,  410,  410,  412,  412,
      413,  413,  414,  414,  416,  416,  417,  417,  418,  418,
      419,  419,  419,  420,  420,  421,  421,  422,  422,  423,

      423,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  427,  427,  428,  428,  429,  429,  430,  430,  431,
      431,  432,  432,  433,  433,  434,  434,  435,    0,  435,
      436,  436,  437,  437,  438,  438,  439,  439,  441,  441,
      442,  442,  443,  443,  444,  444,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  447,  447,  448,  448,
      449,  449,  450,  450,  451,  451,  452,  452,  454,  454,
      455,  455,  456,  456,  457,  457,  458,  458,  459,  459,

      460,  460,  461,  461,  462,  462,  463,  463,  464,  464,
      465,  465,  466,  466,  467,  467,  468,    0,    0,  468,
      468,  468,  468,  468,  468,  468,  469,    0,    0,  469,
      469,  469,  469,  469,  469,  469,  470,  470,  470,  470,
      470,  470,  470,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,

      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[24] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 
    0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "src/Turtle.l"
/*
 * Copyright 2016 Giovanni Mels
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*%option prefix="Turtle"*/
/*%option yyclass="N3Lexer"*/
#line 1036 "src/TurtleLexer.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 55 "src/Turtle.l"


#line 1171 "src/TurtleLexer.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 402 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 401 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 57 "src/Turtle.l"
{ return turtle::Token::Prefix; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 58 "src/Turtle.l"
{ return turtle::Token::Base; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 59 "src/Turtle.l"
{ return turtle::Token::IriRef; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 60 "src/Turtle.l"
{ return turtle::Token::PNameNS; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 61 "src/Turtle.l"
{ return turtle::Token::PNameLN; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 62 "src/Turtle.l"
{ return turtle::Token::BlankNodeLabel; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 63 "src/Turtle.l"
{ return turtle::Token::LangTag; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 64 "src/Turtle.l"
{ return turtle::Token::Integer; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 65 "src/Turtle.l"
{ return turtle::Token::Decimal; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 66 "src/Turtle.l"
{ return turtle::Token::Double; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 67 "src/Turtle.l"
{ return turtle::Token::StringLiteralQuote; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 68 "src/Turtle.l"
{ return turtle::Token::StringLiteralSingleQuote; }
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 69 "src/Turtle.l"
{ return turtle::Token::StringLiteralLongSingleQuote; }
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 70 "src/Turtle.l"
{ return turtle::Token::StringLiteralLongQuote; }
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 71 "src/Turtle.l"

	YY_BREAK
case 16:
YY_RULE_SETUP
#line 72 "src/Turtle.l"

	YY_BREAK
case 17:
YY_RULE_SETUP
#line 73 "src/Turtle.l"
{ return turtle::Token::False; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 74 "src/Turtle.l"
{ return turtle::Token::True; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 75 "src/Turtle.l"
{ return turtle::Token::SparqlPrefix; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 76 "src/Turtle.l"
{ return turtle::Token::SparqlBase; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 77 "src/Turtle.l"
{ return turtle::Token::CaretCaret; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 78 "src/Turtle.l"
{ return yytext[0]; } /* [.;,()[\]a] */
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 80 "src/Turtle.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 1352 "src/TurtleLexer.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 402 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 402 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 401);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 80 "src/Turtle.l"



